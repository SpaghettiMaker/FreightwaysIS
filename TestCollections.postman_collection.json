{
	"info": {
		"_postman_id": "be0c666d-976e-4f39-a0eb-f861f3859627",
		"name": "TestCollections",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CreateTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "26800b3a-0ac4-4d45-a396-39b8458cffbf",
						"exec": [
							"// to manually change id right click the collection TestCollections > Edit, navigate to the Variables tab then modify id. Alternatively click on Pre-request Script\r",
							"// right next to the Tests tab.\r",
							"\r",
							"// Scenario: Creating a new entry\r",
							"// When adding a new entry i.e. POST it\r",
							"// Then after creating, verify that the new entry is present\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"userId\": {\"type\": \"integer\"},\r",
							"        \"id\": {\"type\": \"integer\"},\r",
							"        \"title\": {\"type\": \"string\"},\r",
							"        \"body\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"userId\", \"id\", \"title\", \"body\"]\r",
							"}\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(201); // 201 create success\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response userId to be same as input userId\", () => {\r",
							"    pm.expect(jsonData.userId).to.be.eql(parseInt(pm.collectionVariables.get('userId')));\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response id to be same as input id\", () => {\r",
							"    pm.expect(jsonData.id).to.be.eql(parseInt(pm.collectionVariables.get('id')));\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response title to be same as input title\", () => {\r",
							"    pm.expect(jsonData.title).to.be.eql(pm.collectionVariables.get('title'));\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response body to be same as input body\", () => {\r",
							"    pm.expect(jsonData.body).to.be.eql(pm.collectionVariables.get('body'));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4cabdc79-3050-4d4d-9686-4a137f8f7a09",
						"exec": [
							"// change values here\r",
							"const userId = Math.floor(Math.random() * (48 - 3 + 1)) + 3; // generates random integer between 3 and 48\r",
							"const title = new Date().toJSON();\r",
							"const uuid = require(\"uuid\");\r",
							"const body = uuid.v4();\r",
							"\r",
							"pm.collectionVariables.set('userId', userId); // integer // note toself, number = Long, integer is not a type in postman\r",
							"pm.collectionVariables.set('id', 101); // integer // maybe bug but it appears to always return 101 for id so maybe new entries are created on server incrementally\r",
							"pm.collectionVariables.set('title', 'test title @ ' + title); // string\r",
							"pm.collectionVariables.set('body', 'test body string ' + body); // string\r",
							"\r",
							"pm.test(\"Check userId type before POST\", () => {\r",
							"    pm.expect(pm.collectionVariables.get('userId')).to.be.eql(parseInt(pm.collectionVariables.get('userId'))); // should be integer\r",
							"}) \r",
							"pm.test(\"Check id type before POST\", () => {\r",
							"    pm.expect(pm.collectionVariables.get('id')).to.be.eql(parseInt(pm.collectionVariables.get('id'))); // should be integer\r",
							"}) \r",
							"pm.test(\"Check title type before POST\", () => {\r",
							"    pm.expect(typeof(pm.collectionVariables.get('title'))).to.be.a('string');\r",
							"}) \r",
							"pm.test(\"Check body type before POST\", () => {\r",
							"    pm.expect(typeof(pm.collectionVariables.get('body'))).to.be.a('string');\r",
							"}) \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": {{userId}},\r\n    \"id\": {{id}},\r\n    \"title\": \"{{title}}\",\r\n    \"body\": \"{{body}}\"\r\n}"
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "ReadTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1a28776e-39ad-4a21-a060-77cabbbd3401",
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"userId\": {\"type\": \"integer\"},\r",
							"        \"id\": {\"type\": \"integer\"},\r",
							"        \"title\": {\"type\": \"string\"},\r",
							"        \"body\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"userId\", \"id\", \"title\", \"body\"]\r",
							"}\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Test response id to be same as input id\", () => {\r",
							"  pm.expect(jsonData.id).to.be.eql(parseInt(pm.collectionVariables.get('id')));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f1f817ee-734d-4857-bb40-ee975efca135",
						"exec": [
							"const id = Math.floor(Math.random() * (100 - 1 + 1)) + 1; // generates random integer between 1 and 100\r",
							"\r",
							"pm.collectionVariables.set('id', id)\r",
							"\r",
							"pm.test(\"Check type before GET\", () => {\r",
							"    pm.expect(pm.collectionVariables.get('id')).to.be.eql(parseInt(pm.collectionVariables.get('id'))); // should be integer\r",
							"}) "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{id}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateTest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "4411f946-93c4-47e2-8633-0a83abc537da",
						"exec": [
							"// change values here\r",
							"// userId should be unknown unless it was inferred from an earlier GET request\r",
							"const id = Math.floor(Math.random() * (100 - 1 + 1)) + 1; // generates random integer between 1 and 100\r",
							"const title = new Date().toJSON();\r",
							"const uuid = require(\"uuid\");\r",
							"const body = uuid.v4();\r",
							"\r",
							"pm.collectionVariables.set('id', id); // integer\r",
							"pm.collectionVariables.set('title', 'test title @ ' + title); // string\r",
							"pm.collectionVariables.set('body', 'test body string ' + body); // string\r",
							"\r",
							"pm.test(\"Check id type before PUT\", () => {\r",
							"    pm.expect(pm.collectionVariables.get('id')).to.be.eql(parseInt(pm.collectionVariables.get('id'))); // should be integer\r",
							"})\r",
							"pm.test(\"Check title type before PUT\", () => {\r",
							"    pm.expect(typeof(pm.collectionVariables.get('title'))).to.be.a('string');\r",
							"}) \r",
							"pm.test(\"Check body type before PUT\", () => {\r",
							"    pm.expect(typeof(pm.collectionVariables.get('body'))).to.be.a('string');\r",
							"})  "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "88f79364-466d-4507-8119-dc027c3ca797",
						"exec": [
							"// userId should be unknown unless it was inferred from an earlier GET request\r",
							"// Scenario: Updating a entry\r",
							"// When I change the title and body of a paticular id after PUTing it\r",
							"// verify that title and body has been updated\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\"type\": \"integer\"},\r",
							"        \"title\": {\"type\": \"string\"},\r",
							"        \"body\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"id\", \"title\", \"body\"]\r",
							"}\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response id to be same as input id\", () => {\r",
							"    pm.expect(jsonData.id).to.be.eql(parseInt(pm.collectionVariables.get('id')));\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response title to be same as input title\", () => {\r",
							"    pm.expect(jsonData.title).to.be.eql(pm.collectionVariables.get('title'));\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response body to be same as input body\", () => {\r",
							"    pm.expect(jsonData.body).to.be.eql(pm.collectionVariables.get('body'));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    \"title\": \"{{title}}\",\r\n    \"body\": \"{{body}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{id}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "062aa0dd-0c8a-4c8f-b1d0-f749b19c1564",
						"exec": [
							"// Scenario: Deleting an entry\r",
							"// When I delete an entry by id\r",
							"// I should verify that the entry does not exist after DELETE. Not possible in this context\r",
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "e3e73cbf-cb1f-47c0-880c-8fe1161947dc",
						"exec": [
							"const id = Math.floor(Math.random() * (100 - 1 + 1)) + 1; // generates random integer between 1 and 100\r",
							"\r",
							"pm.collectionVariables.set('id', id); // integer\r",
							"\r",
							"pm.test(\"Check id is an integer before DELETE\", () => {\r",
							"    pm.expect(pm.collectionVariables.get('id')).to.be.eql(parseInt(pm.collectionVariables.get('id'))); // should be integer\r",
							"}) "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{id}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "NegativeGetTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "184f10eb-1004-47da-8b77-e81c14ada28f",
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "07383065-7e9f-4e78-91f1-fe6c7d8e3abc",
						"exec": [
							"pm.collectionVariables.set('negativeGet_id', 'idontexist'); // should fail if id is a string\r",
							"\r",
							"pm.test(\"Check id is an invalid string before GET\", () => {\r",
							"    pm.expect(typeof(pm.collectionVariables.get('negativeGet_id'))).to.be.a('string');\r",
							"}) "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{negativeGet_id}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{negativeGet_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c360b2e9-fae7-4872-bc9a-063b41b05c80",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "8ae69d19-64fc-4eb7-a39f-5ed0a60967f6",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "bf0b7c8a-7058-4f07-aa9f-ecfb9ae31f08",
			"key": "baseUrl",
			"value": "https://jsonplaceholder.typicode.com/posts"
		},
		{
			"id": "4d8eae19-a408-467d-bd2d-642d4501c40a",
			"key": "negativeGet_id",
			"value": "idontexist"
		},
		{
			"id": "7f84137b-6a0c-474e-a33e-e87f09e71e53",
			"key": "id",
			"value": "1"
		},
		{
			"id": "501ca75e-ce06-437a-8511-d4cdd22c2e40",
			"key": "userId",
			"value": "1"
		},
		{
			"id": "7792341b-588c-4ecd-b7b6-ec829fef72c4",
			"key": "title",
			"value": "\"dwqrfqw\""
		},
		{
			"id": "97316ece-220f-4063-b443-6d61c97406bc",
			"key": "body",
			"value": "\"abc\""
		}
	],
	"protocolProfileBehavior": {}
}