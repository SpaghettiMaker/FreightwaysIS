{
	"info": {
		"_postman_id": "40835bec-06b9-4521-9f73-42cf322e97a1",
		"name": "TestCollections",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CreateTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "adfa781b-009b-43ce-ae2d-aa5d84787f43",
						"exec": [
							"// to manually change id right click the collection TestCollections > Edit, navigate to the Variables tab then modify id. Alternatively click on Pre-request Script\r",
							"// right next to the Tests tab.\r",
							"\r",
							"// Scenario: Creating a new entry\r",
							"// When adding a new entry i.e. POST it\r",
							"// Then after creating, verify that the new entry is present\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"userId\": {\"type\": \"integer\"},\r",
							"        \"id\": {\"type\": \"integer\"},\r",
							"        \"title\": {\"type\": \"string\"},\r",
							"        \"body\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"userId\", \"id\", \"title\", \"body\"]\r",
							"}\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(201); // 201 create success\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response userId to be same as input userId\", () => {\r",
							"    pm.expect(jsonData.userId).to.be.eql(parseInt(pm.collectionVariables.get('userId')));\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response id to be same as input id\", () => {\r",
							"    pm.expect(jsonData.id).to.be.eql(parseInt(pm.collectionVariables.get('id')));\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response title to be same as input title\", () => {\r",
							"    pm.expect(jsonData.title).to.be.eql(pm.collectionVariables.get('title'));\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response body to be same as input body\", () => {\r",
							"    pm.expect(jsonData.body).to.be.eql(pm.collectionVariables.get('body'));\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "53b338cb-ffa2-42d0-810d-18d831673cf2",
						"exec": [
							"// change values here\r",
							"const userId = Math.floor(Math.random() * (48 - 3 + 1)) + 3; // generates random integer between 3 and 48\r",
							"const title = new Date().toJSON();\r",
							"const uuid = require(\"uuid\");\r",
							"const body = uuid.v4();\r",
							"\r",
							"pm.collectionVariables.set('userId', userId); // integer // note toself, number = Long, integer is not a type in postman\r",
							"pm.collectionVariables.set('id', 101); // integer // maybe bug but it appears to always return 101 for id so maybe new entries are created on server incrementally\r",
							"pm.collectionVariables.set('title', 'test title @' + title); // string\r",
							"pm.collectionVariables.set('body', 'test body string' + body); // string\r",
							"\r",
							"pm.test(\"Check userId type before POST\", () => {\r",
							"    pm.expect(pm.collectionVariables.get('userId')).to.be.eql(parseInt(pm.collectionVariables.get('userId'))); // should be integer\r",
							"}) \r",
							"pm.test(\"Check id type before POST\", () => {\r",
							"    pm.expect(pm.collectionVariables.get('id')).to.be.eql(parseInt(pm.collectionVariables.get('id'))); // should be integer\r",
							"}) \r",
							"pm.test(\"Check title type before POST\", () => {\r",
							"    pm.expect(typeof(pm.collectionVariables.get('title'))).to.be.a('string');\r",
							"}) \r",
							"pm.test(\"Check body type before POST\", () => {\r",
							"    pm.expect(typeof(pm.collectionVariables.get('body'))).to.be.a('string');\r",
							"}) \r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"content-type": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"userId\": {{userId}},\r\n    \"id\": {{id}},\r\n    \"title\": \"{{title}}\",\r\n    \"body\": \"{{body}}\"\r\n}"
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "ReadTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8f069050-a7c0-4ee0-a943-60487fd1f3da",
						"exec": [
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"userId\": {\"type\": \"integer\"},\r",
							"        \"id\": {\"type\": \"integer\"},\r",
							"        \"title\": {\"type\": \"string\"},\r",
							"        \"body\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"userId\", \"id\", \"title\", \"body\"]\r",
							"}\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validate Schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Test response id to be same as input id\", () => {\r",
							"  pm.expect(jsonData.id).to.be.eql(parseInt(pm.collectionVariables.get('id')));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "be50d0bd-bb12-4692-9718-49353c296968",
						"exec": [
							"const id = Math.floor(Math.random() * (100 - 1 + 1)) + 1; // generates random integer between 1 and 100\r",
							"\r",
							"pm.collectionVariables.set('id', id)\r",
							"\r",
							"pm.test(\"Check type before GET\", () => {\r",
							"    pm.expect(pm.collectionVariables.get('id')).to.be.eql(parseInt(pm.collectionVariables.get('id'))); // should be integer\r",
							"}) "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json; charset=utf-8",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{id}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateTest",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a10ab849-6284-4360-bf88-1504af57318a",
						"exec": [
							"// change values here\r",
							"// userId should be unknown unless it was inferred from an earlier GET request\r",
							"const id = Math.floor(Math.random() * (100 - 1 + 1)) + 1; // generates random integer between 1 and 100\r",
							"const title = new Date().toJSON();\r",
							"const uuid = require(\"uuid\");\r",
							"const body = uuid.v4();\r",
							"\r",
							"pm.collectionVariables.set('id', id); // integer\r",
							"pm.collectionVariables.set('title', 'test title @' + title); // string\r",
							"pm.collectionVariables.set('body', 'test body string' + body); // string\r",
							"\r",
							"pm.test(\"Check id type before PUT\", () => {\r",
							"    pm.expect(pm.collectionVariables.get('id')).to.be.eql(parseInt(pm.collectionVariables.get('id'))); // should be integer\r",
							"})\r",
							"pm.test(\"Check title type before PUT\", () => {\r",
							"    pm.expect(typeof(pm.collectionVariables.get('title'))).to.be.a('string');\r",
							"}) \r",
							"pm.test(\"Check body type before PUT\", () => {\r",
							"    pm.expect(typeof(pm.collectionVariables.get('body'))).to.be.a('string');\r",
							"})  "
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "bcda1241-b19d-4cff-b1e5-f91788f778e7",
						"exec": [
							"// userId should be unknown unless it was inferred from an earlier GET request\r",
							"// Scenario: Updating a entry\r",
							"// When I change the title and body of a paticular id after PUTing it\r",
							"// verify that title and body has been updated\r",
							"const schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"properties\": {\r",
							"        \"id\": {\"type\": \"integer\"},\r",
							"        \"title\": {\"type\": \"string\"},\r",
							"        \"body\": {\"type\": \"string\"}\r",
							"    },\r",
							"    \"required\": [\"id\", \"title\", \"body\"]\r",
							"}\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Validating Schema\", () => {\r",
							"    pm.response.to.have.jsonSchema(schema);\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response id to be same as input id\", () => {\r",
							"    pm.expect(jsonData.id).to.be.eql(parseInt(pm.collectionVariables.get('id')));\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response title to be same as input title\", () => {\r",
							"    pm.expect(jsonData.title).to.be.eql(pm.collectionVariables.get('title'));\r",
							"});\r",
							"\r",
							"pm.test(\"Test data value of the response body to be same as input body\", () => {\r",
							"    pm.expect(jsonData.body).to.be.eql(pm.collectionVariables.get('body'));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": {{id}},\r\n    \"title\": \"{{title}}\",\r\n    \"body\": \"{{body}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{id}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8c312f06-4657-406f-ad61-3a50c33c0587",
						"exec": [
							"// Scenario: Deleting an entry\r",
							"// When I delete an entry by id\r",
							"// I should verify that the entry does not exist after DELETE. Not possible in this context\r",
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "f3ca4ee1-99bd-4271-999e-48b0bc5b02e6",
						"exec": [
							"const id = Math.floor(Math.random() * (100 - 1 + 1)) + 1; // generates random integer between 1 and 100\r",
							"\r",
							"pm.collectionVariables.set('id', id); // integer\r",
							"\r",
							"pm.test(\"Check id is an integer before DELETE\", () => {\r",
							"    pm.expect(pm.collectionVariables.get('id')).to.be.eql(parseInt(pm.collectionVariables.get('id'))); // should be integer\r",
							"}) "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{id}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "NegativeGetTest",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d68d217e-6b2d-4125-8112-7c11e4835c26",
						"exec": [
							"pm.test(\"Status test\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "036f57b8-b187-456d-b562-46ddb74db954",
						"exec": [
							"pm.collectionVariables.set('negativeGet_id', 'idontexist'); // should fail if id is a string\r",
							"\r",
							"pm.test(\"Check id is an invalid string before GET\", () => {\r",
							"    pm.expect(typeof(pm.collectionVariables.get('negativeGet_id'))).to.be.a('string');\r",
							"}) "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jsonplaceholder.typicode.com/posts/{{negativeGet_id}}",
					"protocol": "https",
					"host": [
						"jsonplaceholder",
						"typicode",
						"com"
					],
					"path": [
						"posts",
						"{{negativeGet_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3c5c7e6d-cd9c-4eb1-80b0-f573ed3a9631",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "21a3780a-86da-4da9-971b-215e9955969a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "637d3d69-afee-46c7-b6d4-5f8013d6c4f1",
			"key": "baseUrl",
			"value": "https://jsonplaceholder.typicode.com/posts"
		},
		{
			"id": "54e68a4f-167e-4b78-ad14-eeae825d793b",
			"key": "negativeGet_id",
			"value": "idontexist"
		},
		{
			"id": "146eb7ec-a504-46f5-9f54-7a948e80eade",
			"key": "id",
			"value": "1"
		},
		{
			"id": "fa224219-8ff3-448c-bb18-a886e03481b1",
			"key": "userId",
			"value": "1"
		},
		{
			"id": "c2dfccca-52c5-4681-b6cc-0a0aafc7d3b4",
			"key": "title",
			"value": "\"dwqrfqw\""
		},
		{
			"id": "a5e2ab1d-4ce3-4320-ae48-4fc7fa9599e2",
			"key": "body",
			"value": "\"abc\""
		}
	],
	"protocolProfileBehavior": {}
}